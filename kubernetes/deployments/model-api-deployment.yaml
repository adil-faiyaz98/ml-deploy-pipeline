apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-api
  namespace: ml-deploy
  labels:
    app: model-api
    component: inference
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: model-api
  template:
    metadata:
      labels:
        app: model-api
        component: inference
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8000"
    spec:
      serviceAccountName: model-api
      containers:
      - name: model-api
        image: ${REGISTRY_URL}/model-api:${TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: MODEL_DIR
          value: "/models"
        - name: MODEL_CONFIG_PATH
          value: "/app/config/model_config.json"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENABLE_AUTH
          value: "true"
        - name: PROMETHEUS_MULTIPROC_DIR
          value: "/tmp"
        - name: API_WORKERS
          value: "4"
        - name: MAX_PAYLOAD_SIZE
          value: "50MB"
        - name: TIMEOUT
          value: "300"
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: database_uri
        - name: REDIS_URI
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis_uri
        envFrom:
        - configMapRef:
            name: model-api-config
        - secretRef:
            name: model-api-secrets
        resources:
          limits:
            cpu: "2"
            memory: "4Gi"
          requests:
            cpu: "1"
            memory: "2Gi"
        volumeMounts:
        - name: models-volume
          mountPath: /models
        - name: config-volume
          mountPath: /app/config
        - name: tmp-volume
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: model-storage
      - name: config-volume
        configMap:
          name: model-api-config
      - name: tmp-volume
        emptyDir: {}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values:
                - model-serving
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - model-api
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true