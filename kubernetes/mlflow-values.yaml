# MLflow Helm chart values
service:
  type: ClusterIP
  port: 5000
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "5000"

replicaCount: 2

resources:
  limits:
    cpu: 2
    memory: 4Gi
  requests:
    cpu: 1
    memory: 2Gi

backendStore:
  postgres:
    # Will be set by Terraform (host, port, database, user, password)
    ssl: require

artifactRoot:
  s3:
    # Will be set by Terraform (bucket, region)
    path: "mlflow"

extraEnv:
  - name: MLFLOW_S3_ENDPOINT_URL
    value: "http://minio.default.svc.cluster.local:9000"
  - name: MLFLOW_S3_IGNORE_TLS
    value: "true"
  - name: GUNICORN_CMD_ARGS
    value: "--workers=4 --timeout=120 --log-level=info"

persistence:
  enabled: true
  storageClass: "gp2"
  size: 10Gi

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: /metrics
  prometheus.io/port: "5000"

securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

podSecurityContext:
  runAsNonRoot: true

containerSecurityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
  hosts:
    - host: mlflow.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mlflow-tls
      hosts:
        - mlflow.example.com