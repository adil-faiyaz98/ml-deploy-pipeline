version: '3.9'

# Top-level networks for service isolation
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true  # Only accessible within the stack
  monitoring-network:
    driver: bridge

# Persistent volumes
volumes:
  model-registry:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  minio-data:
    driver: local

# Core services
services:
  # ========== MODEL SERVING LAYER ==========
  model-api:
    build:
      context: .
      dockerfile: deployment/api/Dockerfile
      args:
        - BUILD_ENV=production
    image: ${REGISTRY_URL:-localhost}/model-api:${TAG:-latest}
    container_name: model-api
    restart: unless-stopped
    depends_on:
      model-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_started
    environment:
      - MODEL_DIR=/models
      - MODEL_CONFIG_PATH=/app/config/model_config.json
      - LOG_LEVEL=INFO
      - DATABASE_URI=postgresql://postgres:${DB_PASSWORD:-postgres}@model-db:5432/mlmodels
      - REDIS_URI=redis://redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - ENABLE_AUTH=true
      - PROMETHEUS_MULTIPROC_DIR=/tmp
      - API_WORKERS=4
      - MAX_PAYLOAD_SIZE=50MB
      - TIMEOUT=300
    volumes:
      - model-registry:/models:ro
      - ./config:/app/config:ro
      - ./logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - frontend-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
      replicas: ${API_REPLICAS:-2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    security_opt:
      - no-new-privileges:true
    
  # API Load Balancer
  nginx:
    image: nginx:stable-alpine
    container_name: nginx-lb
    restart: unless-stopped
    ports:
      - "${PUBLIC_PORT:-80}:80"
      - "${PUBLIC_SSL_PORT:-443}:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - model-api
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    
  # ========== TRAINING INFRASTRUCTURE ==========
  model-trainer:
    build:
      context: .
      dockerfile: deployment/trainer/Dockerfile
    image: ${REGISTRY_URL:-localhost}/model-trainer:${TAG:-latest}
    container_name: model-trainer
    command: ["python", "-m", "src.train-model.model_train", "--config", "/app/config/training_config.json"]
    environment:
      - PYTHONUNBUFFERED=1
      - DATA_DIR=/data
      - OUTPUT_DIR=/models
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - RESOURCE_UTILIZATION=0.8
      - ENABLE_GPU=${ENABLE_GPU:-false}
    volumes:
      - ./data:/data:ro
      - model-registry:/models
      - ./config:/app/config:ro
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 32G
    working_dir: /app
    profiles: ["training", "development"]
    
  # ========== DATA & MODEL STORAGE ==========
  model-db:
    image: postgres:14-alpine
    container_name: model-db
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=mlmodels
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    
  redis:
    image: redis:7-alpine
    container_name: model-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis} --appendonly yes
    restart: unless-stopped
    volumes:
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
  minio:
    image: minio/minio:RELEASE.2023-05-27T05-56-19Z
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-minioadmin}
    volumes:
      - minio-data:/data
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    
  # ========== EXPERIMENT TRACKING ==========
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.7.1
    container_name: mlflow
    restart: unless-stopped
    command: >
      mlflow server 
      --host 0.0.0.0 
      --port 5000 
      --backend-store-uri postgresql://postgres:${DB_PASSWORD:-postgres}@model-db:5432/mlmodels
      --default-artifact-root s3://mlflow/artifacts
      --gunicorn-opts "--workers 4 --timeout 120"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_PASSWORD:-minioadmin}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - MLFLOW_S3_IGNORE_TLS=true
    depends_on:
      model-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    networks:
      - frontend-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/2.0/mlflow/experiments/list"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    
  # ========== MONITORING STACK ==========
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployment/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - monitoring-network
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
          
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployment/grafana/dashboards:/etc/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_DOMAIN=localhost
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - frontend-network
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
          
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
          
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
          
  # ========== DISTRIBUTED TRACING ==========
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "4317:4317"     # OTLP gRPC
      - "4318:4318"     # OTLP HTTP
      - "9411:9411"     # Zipkin
    networks:
      - frontend-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
          
  # ========== LOGGING STACK ==========
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-elastic}
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 | grep -q 'You Know, for Search'"]
      interval: 20s
      timeout: 10s
      retries: 10
    ulimits:
      memlock:
        soft: -1
        hard: -1
    profiles: ["monitoring", "development"]
          
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.1
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-elastic}
    depends_on:
      - elasticsearch
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - frontend-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q 'All services are available'"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["monitoring", "development"]
          
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.9.1
    container_name: filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./deployment/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logs:/logs:ro
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-elastic}
      - KIBANA_HOSTS=http://kibana:5601
      - FILEBEAT_INTERNAL_QUEUE_SIZE=8192
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    profiles: ["monitoring", "development"]
          
  # ========== MODEL EVALUATION & TESTING ==========
  model-evaluator:
    build:
      context: .
      dockerfile: deployment/evaluator/Dockerfile
    image: ${REGISTRY_URL:-localhost}/model-evaluator:${TAG:-latest}
    container_name: model-evaluator
    restart: "no"
    environment:
      - PYTHONUNBUFFERED=1
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_API_URL=http://model-api:8000
    volumes:
      - ./data:/data:ro
      - ./evaluation:/evaluation
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    depends_on:
      - model-api
      - mlflow
    profiles: ["evaluation", "development"]