name: Multi-Cloud ML Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'terraform/**'
      - 'kubernetes/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      cloud_provider:
        description: 'Cloud provider to deploy to'
        required: true
        default: 'aws'
        type: choice
        options:
          - aws
          - azure
          - gcp

env:
  TF_VERSION: '1.5.7'
  PYTHON_VERSION: '3.10'
  TF_IN_AUTOMATION: 'true'

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Lint code
        run: |
          flake8 src/
          black --check src/

      - name: Run unit tests
        run: |
          pytest src/tests/ --cov=src

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Validate Terraform
        run: |
          cd terraform
          for dir in aws azure gcp; do
            echo "Validating $dir..."
            cd $dir
            terraform init -backend=false
            terraform validate
            cd ..
          done

  build:
    name: Build and Push Container
    needs: validate
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get short SHA
        id: sha
        run: echo "::set-output name=short::$(git rev-parse --short HEAD)"

      - name: Set environment variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "::set-output name=environment::${{ github.event.inputs.environment }}"
            echo "::set-output name=cloud_provider::${{ github.event.inputs.cloud_provider }}"
          else
            echo "::set-output name=environment::dev"
            echo "::set-output name=cloud_provider::aws"
          fi

      # AWS Container Registry Login
      - name: Configure AWS credentials (AWS)
        if: ${{ steps.vars.outputs.cloud_provider == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR (AWS)
        if: ${{ steps.vars.outputs.cloud_provider == 'aws' }}
        id: login-ecr-aws
        uses: aws-actions/amazon-ecr-login@v1

      # Azure Container Registry Login
      - name: Login to Azure (Azure)
        if: ${{ steps.vars.outputs.cloud_provider == 'azure' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry (Azure)
        if: ${{ steps.vars.outputs.cloud_provider == 'azure' }}
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # GCP Container Registry Login
      - name: Auth to Google Cloud (GCP)
        if: ${{ steps.vars.outputs.cloud_provider == 'gcp' }}
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK (GCP)
        if: ${{ steps.vars.outputs.cloud_provider == 'gcp' }}
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCR (GCP)
        if: ${{ steps.vars.outputs.cloud_provider == 'gcp' }}
        run: gcloud auth configure-docker gcr.io

      # Set registry URL based on cloud provider
      - name: Set registry URL
        id: registry
        run: |
          if [ "${{ steps.vars.outputs.cloud_provider }}" == "aws" ]; then
            echo "::set-output name=url::${{ steps.login-ecr-aws.outputs.registry }}"
          elif [ "${{ steps.vars.outputs.cloud_provider }}" == "azure" ]; then
            echo "::set-output name=url::${{ secrets.ACR_LOGIN_SERVER }}"
          elif [ "${{ steps.vars.outputs.cloud_provider }}" == "gcp" ]; then
            echo "::set-output name=url::gcr.io/${{ secrets.GCP_PROJECT_ID }}"
          fi

      # Build and push model API image
      - name: Build and push model API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/api/Dockerfile
          push: true
          tags: |
            ${{ steps.registry.outputs.url }}/model-api:${{ steps.vars.outputs.environment }}-${{ steps.sha.outputs.short }}
            ${{ steps.registry.outputs.url }}/model-api:${{ steps.vars.outputs.environment }}-latest
          build-args: |
            BUILD_ENV=${{ steps.vars.outputs.environment }}
          cache-from: type=registry,ref=${{ steps.registry.outputs.url }}/model-api:buildcache
          cache-to: type=registry,ref=${{ steps.registry.outputs.url }}/model-api:buildcache,mode=max

      # Build and push model trainer image
      - name: Build and push model trainer image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/trainer/Dockerfile
          push: true
          tags: |
            ${{ steps.registry.outputs.url }}/model-trainer:${{ steps.vars.outputs.environment }}-${{ steps.sha.outputs.short }}
            ${{ steps.registry.outputs.url }}/model-trainer:${{ steps.vars.outputs.environment }}-latest
          build-args: |
            BUILD_ENV=${{ steps.vars.outputs.environment }}
          cache-from: type=registry,ref=${{ steps.registry.outputs.url }}/model-trainer:buildcache
          cache-to: type=registry,ref=${{ steps.registry.outputs.url }}/model-trainer:buildcache,mode=max
            
  deploy:
    name: Deploy Infrastructure
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "::set-output name=environment::${{ github.event.inputs.environment }}"
            echo "::set-output name=cloud_provider::${{ github.event.inputs.cloud_provider }}"
          else
            echo "::set-output name=environment::dev"
            echo "::set-output name=cloud_provider::aws"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      # AWS Setup
      - name: Configure AWS credentials (AWS)
        if: ${{ steps.vars.outputs.cloud_provider == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      # Azure Setup
      - name: Login to Azure (Azure)
        if: ${{ steps.vars.outputs.cloud_provider == 'azure' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # GCP Setup
      - name: Auth to Google Cloud (GCP)
        if: ${{ steps.vars.outputs.cloud_provider == 'gcp' }}
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK (GCP)
        if: ${{ steps.vars.outputs.cloud_provider == 'gcp' }}
        uses: google-github-actions/setup-gcloud@v1

      # Deploy infrastructure with Terraform
      - name: Deploy infrastructure
        run: |
          cd terraform
          cat > terraform.tfvars <<EOF
          cloud_provider = "${{ steps.vars.outputs.cloud_provider }}"
          environment = "${{ steps.vars.outputs.environment }}"
          EOF
          
          terraform init
          terraform plan -var-file=terraform.tfvars -out=tfplan
          terraform apply -auto-approve tfplan

      # Update Kubernetes configs
      - name: Configure kubectl
        run: |
          if [ "${{ steps.vars.outputs.cloud_provider }}" == "aws" ]; then
            aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          elif [ "${{ steps.vars.outputs.cloud_provider }}" == "azure" ]; then
            az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}
          elif [ "${{ steps.vars.outputs.cloud_provider }}" == "gcp" ]; then
            gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GCP_REGION }}
          fi

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes with Helm
        run: |
          # Get registry URL for image references
          if [ "${{ steps.vars.outputs.cloud_provider }}" == "aws" ]; then
            REGISTRY_URL=$(aws ecr describe-repositories --repository-names model-api --query 'repositories[0].repositoryUri' --output text | sed 's/\/model-api//')
          elif [ "${{ steps.vars.outputs.cloud_provider }}" == "azure" ]; then
            REGISTRY_URL="${{ secrets.ACR_LOGIN_SERVER }}"
          elif [ "${{ steps.vars.outputs.cloud_provider }}" == "gcp" ]; then
            REGISTRY_URL="gcr.io/${{ secrets.GCP_PROJECT_ID }}"
          fi
          
          # Install/upgrade Helm charts with the right values
          helm upgrade --install ml-deployment ./kubernetes/helm-charts/ml-deployment \
            --namespace ml-deploy --create-namespace \
            --set global.environment=${{ steps.vars.outputs.environment }} \
            --set global.cloudProvider=${{ steps.vars.outputs.cloud_provider }} \
            --set global.images.registry=$REGISTRY_URL \
            --set modelApi.image.tag=${{ steps.vars.outputs.environment }}-latest
            
  test:
    name: Integration Tests
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run integration tests
        run: |
          cd integration-tests
          python -m pytest -v