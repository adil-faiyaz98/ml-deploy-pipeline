name: ML Deploy Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'terraform/**'
      - 'deployment/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      cloud_provider:
        description: 'Cloud provider to deploy to'
        required: true
        default: 'aws'
        type: choice
        options:
          - aws
          - azure
          - gcp

env:
  TF_VERSION: '1.5.7'
  PYTHON_VERSION: '3.10'
  TF_IN_AUTOMATION: 'true'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format
        run: terraform fmt -check -recursive
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Run Linting
        run: |
          pylint src/
          flake8 src/
          
      - name: Run Tests
        run: |
          pytest -xvs tests/
  
  plan:
    name: Plan
    needs: validate
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
      CLOUD_PROVIDER: ${{ github.event.inputs.cloud_provider || 'aws' }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Configure AWS Credentials
        if: env.CLOUD_PROVIDER == 'aws'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: ML Deploy Pipeline

        on:
          push:
            branches: [ main ]
            paths:
              - 'src/**'
              - 'terraform/**'
              - 'deployment/**'
              - '.github/workflows/**'
          pull_request:
            branches: [ main ]
          workflow_dispatch:
            inputs:
              environment:
                description: 'Environment to deploy to'
                required: true
                default: 'dev'
                type: choice
                options:
                  - dev
                  - staging
                  - production
              cloud_provider:
                description: 'Cloud provider to deploy to'
                required: true
                default: 'aws'
                type: choice
                options:
                  - aws
                  - azure
                  - gcp

        env:
          TF_VERSION: '1.5.7'
          PYTHON_VERSION: '3.10'
          TF_IN_AUTOMATION: 'true'
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

        jobs:
          validate:
            name: Validate
            runs-on: ubuntu-latest
            steps:
              - name: Checkout
                uses: actions/checkout@v3
              
              - name: Setup Terraform
                uses: hashicorp/setup-terraform@v2
                with:
                  terraform_version: ${{ env.TF_VERSION }}
              
              - name: Terraform Format
                run: terraform fmt -check -recursive
              
              - name: Setup Python
                uses: actions/setup-python@v4
                with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  
              - name: Install Dependencies
                run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements-dev.txt
                  
              - name: Run Linting
                run: |
                  pylint src/
                  flake8 src/
                  
              - name: Run Tests
                run: |
                  pytest -xvs tests/
          
          plan:
            name: Plan
            needs: validate
            runs-on: ubuntu-latest
            env:
              TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
              CLOUD_PROVIDER: ${{ github.event.inputs.cloud_provider || 'aws' }}
              
            steps:
              - name: Checkout
                uses: actions/checkout@v3
                
              - name: Setup Terraform
                uses: hashicorp/setup-terraform@v2
                with:
                  terraform_version: ${{ env.TF_VERSION }}
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
              
              - name: Configure AWS Credentials
                if: env.CLOUD_PROVIDER == 'aws'
                uses: aws-actions/configure-aws-credentials@v1
                with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}
              
              - name: Configure GCP Credentials
                uses: google-github-actions/auth@v0
                with:
                  credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}