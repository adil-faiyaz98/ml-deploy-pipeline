# GitHub Actions CI/CD Pipeline for ML Model Deployment with Security, Logging, Cost Optimization, and Model Versioning

name: ML Model Secure CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test Model
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          pytest tests/

      - name: Scan Dependencies for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "python:3.9"
          format: "table"
          exit-code: "1"

  dataset_versioning:
    name: Dataset Versioning with DVC
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Set Up DVC
        run: |
          pip install dvc[s3]
          dvc pull
      
      - name: Commit Dataset Changes
        run: |
          dvc add data/
          git add data.dvc .gitignore
          git commit -m "Updated dataset version"
          git push origin main
          dvc push

  deploy:
    needs: [build, dataset_versioning]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Retrieve Kubernetes Secrets from AWS Secrets Manager
        run: |
          aws secretsmanager get-secret-value --secret-id ml-k8s-secrets --query SecretString --output text > kubernetes/secrets.env
          export $(cat kubernetes/secrets.env | xargs)

      - name: Deploy to Kubernetes Cluster
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl apply -f kubernetes/hpa.yaml
          kubectl apply -f kubernetes/ingress.yaml
          kubectl apply -f kubernetes/secrets.yaml

      - name: Optimize Costs with Spot Instances
        run: |
          eksctl create nodegroup --cluster ml-cluster --name spot-nodes --instance-types=m5.large --spot

  model_versioning:
    name: Model Versioning with MLflow
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Track Model Version in MLflow
        run: |
          export MLFLOW_TRACKING_URI=http://mlflow-server:5000
          mlflow models serve -m "models:/ml_model/latest"

      - name: Store Model in Feature Store
        run: |
          pip install feast
          feast apply

  real_time_monitoring:
    name: Real-Time Model Performance Monitoring
    needs: model_versioning
    runs-on: ubuntu-latest
    steps:
      - name: Collect Real-Time Inference Latency
        run: |
          python monitoring/collect_latency.py
      
      - name: Monitor Response Time Trends
        run: |
          python monitoring/track_response_time.py
      
      - name: Alert on High Latency
        run: |
          python monitoring/alert_latency.py
      
      - name: Log Inference Performance Metrics
        run: |
          python monitoring/log_performance_metrics.py

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          exit-code: "1"
          format: "table"

      - name: Run Snyk Code Security Scan
        uses: snyk/actions/python@master
        with:
          args: "--severity-threshold=high"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  monitor:
    needs: model_versioning
    runs-on: ubuntu-latest
    steps:
      - name: Monitor Model Performance
        run: |
          python monitoring/model_monitoring.sh

      - name: Detect Model Drift
        run: |
          python retraining/drift_detection.py

  a_b_testing:
    name: Automated A/B Testing & Canary Deployments
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Split Traffic for A/B Testing
        run: |
          kubectl apply -f kubernetes/traffic-split.yaml
      
      - name: Monitor A/B Test Performance
        run: |
          python monitoring/ab_test_monitor.py
      
      - name: Gradual Rollout with Canary Deployment
        run: |
          kubectl apply -f kubernetes/canary-deployment.yaml
      
      - name: Validate Canary Performance
        run: |
          python monitoring/canary_performance_check.py

    compliance_governance:
      name: Compliance & Governance Controls
      needs: disaster_recovery
      runs-on: ubuntu-latest
      steps:
        - name: Enable Audit Logging
          run: |
            kubectl apply -f kubernetes/audit-logging.yaml
        
        - name: Validate GDPR & SOC 2 Readiness
          run: |
            python compliance/gdpr_check.py
            python compliance/soc2_check.py
        
        - name: Enforce Model Access Controls
          run: |
            kubectl apply -f kubernetes/rbac-model-access.yaml
        
        - name: Log Compliance Events
          run: |
            python compliance/log_compliance_events.py

    multi_cloud_deployment:
      name: Multi-Cloud Deployment Support
      needs: compliance_governance
      runs-on: ubuntu-latest
      steps:
        - name: Deploy Model on AWS SageMaker
          run: |
            bash deployment/deploy_sagemaker.sh
        
        - name: Deploy Model on Azure ML
          run: |
            bash deployment/deploy_azure_ml.sh
        
        - name: Deploy Model on GCP Vertex AI
          run: |
            bash deployment/deploy_vertex_ai.sh
        
        - name: Validate Multi-Cloud Health
          run: |
            python monitoring/multi_cloud_health_check.py

    edge_ai_iot:
      name: Edge AI & IoT Deployment
      needs: multi_cloud_deployment
      runs-on: ubuntu-latest
      steps:
        - name: Convert Model to ONNX for Edge Deployment
          run: |
            python edge_ai/convert_to_onnx.py
        
        - name: Optimize Model with TensorRT
          run: |
            python edge_ai/optimize_tensorrt.py
        
        - name: Deploy Model to Edge Device
          run: |
            python edge_ai/deploy_edge_device.py
        
        - name: Monitor Edge AI Performance
          run: |
            python monitoring/edge_performance_monitor.py

    federated_learning:
      name: Federated Learning Support
      needs: edge_ai_iot
      runs-on: ubuntu-latest
      steps:
        - name: Initialize Federated Learning Clients
          run: |
            python federated_learning/init_clients.py
        
        - name: Train Model Across Distributed Clients
          run: |
            python federated_learning/train_federated.py
        
        - name: Aggregate Federated Model Updates
          run: |
            python federated_learning/aggregate_updates.py
        
        - name: Deploy Federated Model Globally
          run: |
            python federated_learning/deploy_federated_model.py

    privacy_preserving_ai:
      name: Privacy-Preserving AI Techniques
      needs: federated_learning
      runs-on: ubuntu-latest
      steps:
        - name: Apply Differential Privacy to Model Training
          run: |
            python privacy/differential_privacy_train.py
        
        - name: Encrypt Model with Homomorphic Encryption
          run: |
            python privacy/homomorphic_encrypt_model.py
        
        - name: Secure Model Inference with Encrypted Computation
          run: |
            python privacy/secure_inference.py


  disaster_recovery:
    name: Disaster Recovery & Failover Strategy
    needs: a_b_testing
    runs-on: ubuntu-latest
    steps:
      - name: Backup Model & Data
        run: |
          aws s3 sync models/ s3://ml-backup-bucket/models/
          aws s3 sync data/ s3://ml-backup-bucket/data/
      
      - name: Deploy Failover Model
        run: |
          kubectl apply -f kubernetes/failover-deployment.yaml
      
      - name: Test Failover Readiness
        run: |
          python monitoring/failover_readiness_check.py
      
      - name: Automate Failover Switch if Needed
        run: |
          python monitoring/trigger_failover.py

  logging:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Configure Cloud Logging
        run: |
          aws logs create-log-group --log-group-name /aws/ml_model_logs || true
          aws logs create-log-stream --log-group-name /aws/ml_model_logs --log-stream-name inference_logs || true
          echo "Cloud Logging Configured"

      - name: Send Logs to AWS CloudWatch
        run: |
          tail -n 100 logs/model_logs.log | aws logs put-log-events --log-group-name /aws/ml_model_logs --log-stream-name inference_logs --log-events '[{"timestamp": '$(date +%s000)', "message": "Model log data"}]'

      - name: Integrate with Loki Logging
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"streams": [{"stream": {"job": "ml_model"}, "values": [["$(date +%s%N)", "Model log data"]]}]}' http://loki:3100/loki/api/v1/push

  rollback:
    needs: monitor
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback to Previous Model Version
        run: |
          python rollback/rollback_model.py